name: Build

on:
  push:
    branches: [ public ]
  pull_request:
    branches: [ public ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: linux_x86_64_ifort_icc
            have_gap: 1
            have_scalapack: 0
          - arch: linux_x86_64_ifort_icc_iomp
            have_gap: 1
            have_scalapack: 0
          - arch: linux_x86_64_ifort_icc_impi
            have_gap: 1
            have_scalapack: 1

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Install dependencies - GNU
        if: contains( matrix.arch, 'gfortran' )
        env:
          QUIP_ARCH: ${{ matrix.arch }}
          HAVE_GAP: ${{ matrix.have_gap }}
          HAVE_SCALAPACK: ${{ matrix.have_scalapack }}
          gcc_version: ${{ matrix.gcc_version }}
        run: |
          sudo apt-get update -y
          sudo apt-get install -y  gfortran libblas-dev liblapack-dev \
            openmpi-bin libopenmpi-dev netcdf-bin libnetcdf-dev libhdf5-serial-dev \
            python3-numpy

          if [[ "$HAVE_SCALAPACK" == 1 ]]; then
              sudo apt-get install -y libscalapack-openmpi-dev
          fi

          if [[ "$gcc_version" == 10 ]]; then
              # compilers explicitly pointing to gcc-10
              export F77=gfortran-10
              export F90=gfortran-10
              export F95=gfortran-10
              export CC=gcc-10
              export CPLUSPLUS=g++-10
          fi

      - name: Install INTEL compilers
        if: contains( matrix.arch, 'ifort' )
        env:
          QUIP_ARCH: ${{ matrix.arch }}
          HAVE_GAP: ${{ matrix.have_gap }}
          HAVE_SCALAPACK: ${{ matrix.have_scalapack }}
          gcc_version: ${{ matrix.gcc_version }}
        run: |
          wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          rm GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          sudo echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
          sudo apt-get update

          sudo apt-get install -y python python-numpy pip

          sudo apt-get install -y --no-install-recommends -o=Dpkg::Use-Pty=0 \
                  intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic \
                  intel-oneapi-compiler-fortran \
                  intel-oneapi-mkl intel-oneapi-mkl-devel

          if [[ "${{ matrix.have_scalapack }}" == 1 ]] ; then
              sudo apt-get install -y --no-install-recommends intel-oneapi-mpi intel-oneapi-mpi-devel
          fi

          source /opt/intel/oneapi/setvars.sh
          printenv >> $GITHUB_ENV

      # substitute for make config
      - name: Include Config
        env:
          QUIP_ARCH: ${{ matrix.arch }}
          HAVE_SCALAPACK: ${{ matrix.have_scalapack }}
        run: |
          mkdir -p build/${QUIP_ARCH}

          if [[ "$QUIP_ARCH" == linux_x86_64_ifort_icc_iomp_impi ]] ; then
              cp -v .github/workflows/Makefile.intel.inc build/${QUIP_ARCH}/Makefile.inc
          elif [[ "$QUIP_ARCH" == linux_x86_64_ifort_icc_iomp ]] ; then
              cp -v .github/workflows/Makefile.intel.inc build/${QUIP_ARCH}/Makefile.inc
          elif [[ "$QUIP_ARCH" == linux_x86_64_ifort_icc_impi ]] ; then
              cp -v .github/workflows/Makefile.intel.inc build/${QUIP_ARCH}/Makefile.inc
          elif [[ "$HAVE_SCALAPACK" == 1 ]]; then
              cp -v .github/workflows/Makefile.openmpi+openmp.inc build/${QUIP_ARCH}/Makefile.inc
          elif [[ "$gcc_version" == 10 ]]; then
              cp -v .github/workflows/Makefile.gcc10.inc build/${QUIP_ARCH}/Makefile.inc
          else
              # gcc-9 is the default one in github actions containers (last checked: 2021 Aug)
              cp -v .github/workflows/Makefile.inc build/${QUIP_ARCH}/Makefile.inc
          fi

      - name: Build QUIP
        env:
          QUIP_ARCH: ${{ matrix.arch }}
          HAVE_GAP: ${{ matrix.have_gap }}
          HAVE_SCALAPACK: ${{ matrix.have_scalapack }}
        run: |
          make
          make libquip
          make quippy
          make install-quippy

      # Uncomment to get SSH access for testing
      - name: Setup tmate session
        if: failure()
        uses: mxschmitt/action-tmate@v3            

      - name: Test QUIP
        env:
          QUIP_ARCH: ${{ matrix.arch }}
          HAVE_GAP: ${{ matrix.have_gap }}
          HAVE_SCALAPACK: ${{ matrix.have_scalapack }}
        run: |
          if [[ "$QUIP_ARCH" == 'linux_x86_64_ifort_icc' ]] ; then
              LD_PRELOAD="$MKLROOT/lib/intel64/libmkl_intel_lp64.so.2"
              LD_PRELOAD="$LD_PRELOAD:$MKLROOT/lib/intel64/libmkl_sequential.so.2"
              LD_PRELOAD="$LD_PRELOAD:$MKLROOT/lib/intel64/libmkl_core.so.2"
          elif [[ "$QUIP_ARCH" == 'linux_x86_64_ifort_icc_iomp' ]] ; then
              LD_PRELOAD="$MKLROOT/lib/intel64/libmkl_intel_lp64.so.2"
              LD_PRELOAD="$LD_PRELOAD:$MKLROOT/lib/intel64/libmkl_sequential.so.2"
              LD_PRELOAD="$LD_PRELOAD:$MKLROOT/lib/intel64/libmkl_core.so.2"
              LD_PRELOAD="$LD_PRELOAD:$ONEAPI_ROOT/compiler/2022.0.2/linux/compiler/lib/intel64_lin/libiomp5.so"
          elif [[ "$QUIP_ARCH" == 'linux_x86_64_ifort_icc_impi' ]] ; then
              LD_PRELOAD="$MKLROOT/lib/intel64/libmkl_intel_lp64.so.2"
              LD_PRELOAD="$LD_PRELOAD:$MKLROOT/lib/intel64/libmkl_sequential.so.2"
              LD_PRELOAD="$LD_PRELOAD:$MKLROOT/lib/intel64/libmkl_core.so.2"
          fi
          export LD_PRELOAD
          export QUIP_ROOT=$PWD
          ulimit -n 256
          make test

      # Uncomment to get SSH access for testing
      - name: Setup tmate session
        if: failure()
        uses: mxschmitt/action-tmate@v3     

  # Builds the QUIP docs webpage image. This only happens ON the public 
  # branch, after tests pass and pull requests are completed
  docs:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/public'

    steps:
      - uses: actions/checkout@v3

      - name: Build documentation
        run: |
          sudo apt-get install -y libgsl0-dev libxpm-dev pandoc
          pip install sphinx sphinx-rtd-theme nbsphinx numpydoc pygments==2.5.2 nbconvert[execute] ipython

          # FIXME: currently we use the released version of quippy package to build docs, 
          # would be better to cache wheel from step above
          pip install quippy-ase

          cd doc
          python -m sphinx . _build/html

      - name: Deploy documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: doc/_build/html

  # Builds the QUIP docker image. This takes about 1h 20min
  # this only happens ON the public branch, after pull requests
  # are completed
  docker:
    runs-on: ubuntu-latest
    needs: build # depends on the previous matrix jobs to succeed
    if: github.ref == 'refs/heads/public'

    steps:
      - uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # with dev tag for now
      - name: Build quip
        run: |
          docker build --tag libatomsquip/quip:public docker
          docker push libatomsquip/quip:public
